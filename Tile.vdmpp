class Tile
types
		public Coordinates ::x : nat1
												 y : nat1;
instance variables

		private isSpecial: bool;
		private coordinates: Coordinates;
		private piece: [Piece];
		
		inv coordinates.x in set {1, ..., Board`smallSizeX} and
				coordinates.y in set {1, ..., Board`smallSizeY}
		
operations
		public Tile: nat1 * nat1 ==> Tile
		Tile(xT, yT) == (
				coordinates := mk_Coordinates(xT, yT);
				piece := nil;
				if ((xT = 1 and yT = 1) or (xT = Board`smallSizeX and yT = Board`smallSizeY) or
					(xT = 1 and yT = Board`smallSizeY) or (xT = Board`smallSizeX and yT = 1))
					then isSpecial := true
					else isSpecial := false;
				return self
		);
		
		public Tile: nat1 * nat1 * Piece ==> Tile
				Tile(xT, yT, p) == (
				coordinates := mk_Coordinates(xT, yT);
				piece := p;
				return self
		);
		
		pure public getCoordinates: () ==> Coordinates
		getCoordinates() == return coordinates;
		
		pure public getPiece: () ==> [Piece]
		getPiece() == return piece;
		
		public setPiece: Piece ==> ()
		setPiece(p) == piece := p;
		
end Tile