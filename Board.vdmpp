class Board
types

values

		public smallSizeX: nat1 = 6;
		public smallSizeY: nat1 = 10;
		public smallSize: nat1 = smallSizeX * smallSizeY;
		
		public bigSizeX: nat1 = 6;
		public bigSizeY: nat1 = 10;
		public bigSize: nat1 = bigSizeX * bigSizeY;
		
instance variables
		
		private bigBoard: bool;
		private board: seq of seq of Tile := [[]];
		private static boardInstance:Board := new Board();

operations
		public Board: bool ==> Board
		Board(n) == (
				dcl boardLine: seq of Tile;
				
				if n then bigBoard := true else bigBoard := false;
				
				if bigBoard = false then (
					for counter_i = 1 to smallSizeY do (
						boardLine:= [];
						for counter_j = 1 to smallSizeX do (
							boardLine := boardLine ^ [new Tile(counter_j, counter_i)];
						);
						board(counter_i) := board(counter_i) ^ boardLine;
					);
				);
		);
		
		public static getInstance: () ==> Board
		getInstance() == return boardInstance;
        
end Board