class Board

values

		public smallSizeX: nat1 = 6;
		public smallSizeY: nat1 = 10;
		public smallSize: nat1 = smallSizeX * smallSizeY;
		
		public bigSizeX: nat1 = 6;
		public bigSizeY: nat1 = 10;
		public bigSize: nat1 = bigSizeX * bigSizeY;
		
instance variables
		
		private bigBoard: bool;
		private board: seq of seq of Tile := [[]];
		private static boardInstance:Board := new Board();

operations
		public Board: bool ==> Board
		Board(n) == (
				dcl boardLine: seq of Tile;
				
				if n then bigBoard := true else bigBoard := false;
				
				if bigBoard = false then (
					for counter_i = 1 to smallSizeY do (
						boardLine:= [];
						for counter_j = 1 to smallSizeX do (
							boardLine := boardLine ^ [buildBoard(counter_j, counter_i)];
						);
						board(counter_i) := board(counter_i) ^ boardLine;
					);
				);
		);
		
		private buildBoard: nat1 * nat1 ==> Tile
		buildBoard(x, y) == (
		
		--Black pieces
			-- Black crosses
			if (x = 1 and (y = 2 or y = 4)) or ((x = 5 or x = 6) and y = 1)
			then return (new Tile(x, y, new Cross(<Black>)));
			-- Black circles
			if (x = 1 and (y = 3 or y = 4)) or (x = 2 and (y = 2 or y = 5))
				or ((x = 4 or x = 7) and y = 2)
			then return (new Tile(x, y, new Circle(<Black>)));
			-- Black squares
			if (x = 2 and (y = 3 or y = 4)) or ((x = 4 or x = 7) and y = 1)
				or ((x = 5 or x = 6) and y = 2)
			then return (new Tile(x, y, new Square(<Black>)));
		
		--White pieces
			-- White crosses
			if ((x = 5 or x = 6) and y = 6) or (x = 10 and (y = 2 or y = 4))
			then return (new Tile(x, y, new Cross(<White>)));
			-- White circles
			if ((x = 4 or x = 7) and y = 2) or (x = 9 and (y = 2 or y = 4))
				or (x = 10 and (y = 3 or y = 4))
			then return (new Tile(x, y, new Circle(<White>)));
			-- White squares
			if (x = 9 and (y = 3 or y = 4)) or ((x = 4 or x = 7) and y = 6)
				or ((x = 5 or x = 6) and y = 5)
			then return (new Tile(x, y, new Square(<White>)));
			return (new Tile(x, y));
		);
		
		public static getInstance: () ==> Board
		getInstance() == return boardInstance;
		
		public getTile: nat1 * nat1 ==> Tile
		getTile(x, y) == (
				return board(x)(y);
		);
        
end Board