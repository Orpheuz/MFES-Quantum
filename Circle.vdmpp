class Circle is subclass of Piece

operations

		public Circle: Player ==> Circle
		Circle(p) == Piece(p);

		public checkPiecesMiddle: Tile * Tile ==> bool
		checkPiecesMiddle(ti,tf) == (
				dcl tempX: nat1 := ti.getCoordinates().x;
				dcl tempY: nat1 := ti.getCoordinates().y;
				dcl signalX: bool := false;
				dcl signalY: bool := false;
				if(tf.getCoordinates().x > ti.getCoordinates().x)
					then signalX := true;
				if(tf.getCoordinates().y > ti.getCoordinates().y)
					then signalY := true;
				while(tempX <> tf.getCoordinates().x and tempY <> tf.getCoordinates().y)
						do (
								if(signalX)
									then tempX := tempX + 1
								else	tempX := tempX - 1;
								if(signalY)
									then tempY := tempY + 1
								else
									tempY := tempY-1;
								if(Board`getInstance().getTile(tempX, tempY).getPiece() <> nil)
									then return false;
								);
				return true;
		);

		public canMoveTo: Tile * Tile ==> bool
		canMoveTo(ti, tf) == (
			if(ti.isSpecial())
				then (
					return checkPiecesMiddle(ti,tf) and
									abs(ti.getCoordinates().x - tf.getCoordinates().x) = abs(ti.getCoordinates().y - tf.getCoordinates().y);
				)
			else return	(abs(ti.getCoordinates().x - tf.getCoordinates().x) = 1 and
								abs(ti.getCoordinates().y - tf.getCoordinates().y) = 1)
		)
		pre ti <> tf;
		
		public canMoveTo: Tile * Tile * nat1 ==> bool
		canMoveTo(ti, tf, n) == (
				if(ti.isSpecial())
					then (
						return checkPiecesMiddle(ti,tf) and
										abs(ti.getCoordinates().x - tf.getCoordinates().x) = abs(ti.getCoordinates().y - tf.getCoordinates().y);
					)
				else return	abs(ti.getCoordinates().x - tf.getCoordinates().x) <= n and
										abs(ti.getCoordinates().y - tf.getCoordinates().y) <= n and
										abs(ti.getCoordinates().x - tf.getCoordinates().x) = abs(ti.getCoordinates().y - tf.getCoordinates().y) and
										checkPiecesMiddle(ti,tf)
										;
		)
		pre ti <> tf;
		
		pure public getSize: () ==> nat1
		getSize() == return 1;
		
		pure public getTopPiece: () ==> Piece
		getTopPiece() == return self;
		
end Circle