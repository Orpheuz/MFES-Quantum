class Tower is subclass of Piece

instance variables

	private stack : seq of Piece := [];
	inv len stack > 1;
	-- inv 2 peças seguidas tem de ser de players diferentes

operations
		public Tower: Player * Piece * Piece ==> Tower
		Tower(player, p1, p2) == (	
				stack := [p1, p2] ^ stack;
				Piece(player);
		);

		public canMoveTo: Tile * Tile ==> bool
		canMoveTo(ti, tf) == (
				return (hd stack).canMoveTo(ti, tf, getSize());
		)
		pre len stack < 6;
		
		--é preciso ver se isto dá override à função da classe mãe
		public capturePiece: Piece ==> ()
		capturePiece(p) == (
				stack := [p] ^ stack;
				if pieceOfPlayer = <White> then pieceOfPlayer := <Black>
				else pieceOfPlayer := <White>;
		)
		pre len stack < 6
		post len stack = len stack~ + 1 and
		pieceOfPlayer <> pieceOfPlayer~;
		
		pure public getSize: () ==> nat1
		getSize() == return len stack;
		
functions
-- TODO Define functiones here
traces
-- TODO Define Combinatorial Test Traces here
end Tower