class Quantum
types
		public Player = <Player1> | <Player2>; --Player types
		public State = <Player1Won> | <Player2Won> | <Playing> | <NotStarted>; --Game states

instance variables
		private boardType: bool; --Board type
		public board: Board; --Board instance
		private playerTurn: Player; --Player turn
		private actualState: State; --Actual game state
		private score: map Player to nat := {<Player1> |-> 0, <Player2> |-> 0}; --score map
	
operations
		
		--Game constructor
		public Quantum: bool ==> Quantum
    Quantum(n) == (
			boardType := n;
			board := Board`getInstance();
			board.setBoardType(boardType);
			playerTurn := <Player1>;
			actualState := <NotStarted>;
    );      
      
    --checks if game is over yet          
    public updateGameState: () ==> ()
    updateGameState() == (
    		dcl countW: nat := 0;
    		dcl countB: nat := 0;
    		for all t in set {board.getTile(x, y) | x in set {1, ..., Board`smallSizeY}, y in set {1, ..., Board`smallSizeX}} 
    			do (
    				if(t.getPiece() <> nil and t.getPiece().getSize() >= 6) then
    					if(t.getPiece().getPlayer() = <White>) then countW := countW + 1
    					else countB := countB + 1;
    			);
    		if(countW >= 3) then (
    			actualState := <Player1Won>;
    			score := score ++ {<Player1> |-> score(<Player1>) + 1};
    			)
    		else if(countB >= 3) then (
    			actualState := <Player2Won>;
    			score := score ++ {<Player2> |-> score(<Player2>) + 1};
    			)
    );   
    
    --changes game state to started      
    public startGame: () ==> ()
    startGame() == actualState := <Playing>;  
    
    --ends a player turn
    public endTurn: () ==> ()
    endTurn() == (
    	if(playerTurn = <Player1>) then playerTurn := <Player2>
    	else playerTurn := <Player1>
    )
    post playerTurn <> playerTurn~;
    
    --move piece from a tile to another
    public movePieceTo: nat1 * nat1 * nat1 * nat1 ==> bool
    movePieceTo(xi, yi, xf, yf) == (
    	if(board.getTile(xi, yi).getPiece() <> nil)
    		then return board.getTile(xi, yi).getPiece().moveTo(board.getTile(xi, yi), board.getTile(xf, yf))
    	else return false;
    );
    
    --method get game state
    pure public getGameState: () ==> State
    getGameState() == return actualState;
    
    --method get actual player turn
    pure public getActualPlayer: () ==> Player
    getActualPlayer() == return playerTurn;
    
    --method get score
    pure public getScore: () ==> map Player to nat
    getScore() == return score;
    
end Quantum