class Cross is subclass of Piece

operations

		public Cross: Player ==> Cross
		Cross(p) == Piece(p);

    -- checks if can move between two different tiles
		public canMoveTo: Tile * Tile ==> bool
		canMoveTo(ti, tf) == (
				dcl tempX: nat1;
				dcl tempY: nat1;
				dcl maxX: nat1;
				dcl maxY: nat1;
				if(ti.getCoordinates().x = tf.getCoordinates().x and ti.getCoordinates().y <> tf.getCoordinates().y)
					then (
								tempX := ti.getCoordinates().x;
								if(ti.getCoordinates().y > tf.getCoordinates().y)
									then (maxX := ti.getCoordinates().y; tempY := tf.getCoordinates().y)
									else (tempY := ti.getCoordinates().y; maxX := tf.getCoordinates().y);
								while(tempY < maxX-1)
									do(tempY := tempY + 1;
											if(Board`getInstance().getTile(tempX, tempY).getPiece() <> nil)
												then return false);
								);
				if(ti.getCoordinates().x <> tf.getCoordinates().x and ti.getCoordinates().y = tf.getCoordinates().y)
					then(
				 		tempY := ti.getCoordinates().y;
				 		if(ti.getCoordinates().x > tf.getCoordinates().x)
							then (maxX := ti.getCoordinates().x; tempX := tf.getCoordinates().x)
							else (tempX := ti.getCoordinates().x; maxX := tf.getCoordinates().x);
							while(tempX < maxX-1)
								do (tempX := tempX + 1;
										if(Board`getInstance().getTile(tempX, tempY).getPiece() <> nil)
											then return false
										);
						)
				else (if(ti.getCoordinates().x > tf.getCoordinates().x)
					then (tempX := tf.getCoordinates().x;	maxX := ti.getCoordinates().x)
					else (tempX := ti.getCoordinates().x;	maxX := tf.getCoordinates().x);
				if(ti.getCoordinates().y > tf.getCoordinates().y)
					then (tempY := tf.getCoordinates().y; maxY := ti.getCoordinates().y)
					else (tempY := ti.getCoordinates().y; maxY := tf.getCoordinates().y);
				while(tempX < maxX-1 and tempY < maxY-1)
					do (tempX := tempX + 1;
							tempY := tempY + 1;
							if(Board`getInstance().getTile(tempX, tempY).getPiece() <> nil)
								then return false
					););
				
				return abs(ti.getCoordinates().x - tf.getCoordinates().x) <= 1 and
							 abs(ti.getCoordinates().y - tf.getCoordinates().y) <= 1
				-- and
					--			abs(ti.getCoordinates().x - tf.getCoordinates().x) = 1 and
						--		abs(ti.getCoordinates().y - tf.getCoordinates().y) = 1) 
							--	or (abs(ti.getCoordinates().x - tf.getCoordinates().x) = 1 or 
							 	--abs(ti.getCoordinates().y - tf.getCoordinates().y) = 1);
		) pre ti <> tf;
		
		public canMoveTo: Tile * Tile * nat1 ==> bool
		canMoveTo(ti, tf, n) == (
				return abs(ti.getCoordinates().x - tf.getCoordinates().x) <= n and abs(ti.getCoordinates().y - tf.getCoordinates().y) <= n
		)
		pre ti <> tf;
		
end Cross